{"name":"Clairvoyance","tagline":"A Scala Specs2 extension, producing human readable documentation Ã  la Yatspec.","body":"Clairvoyance\r\n============\r\n\r\nClairvoyance is an extension to Specs2, a Scala test library. Clairvoyance provides a few extensions to capture what is\r\nhappening in your tests, and then produce business and tester friendly documentation.\r\n\r\nIt's a pastiche of [Yatspec](http://code.google.com/p/yatspec), a Java testing library written by my colleague Dan\r\nBodart. It addresses the deficiencies we experienced with Fit and Concordion.\r\n\r\n[![Build Status](https://secure.travis-ci.org/rhyskeepence/clairvoyance.svg)](http://travis-ci.org/rhyskeepence/clairvoyance)\r\n\r\nExample\r\n-------\r\n\r\nThe full source to this example is [here](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/LoggingExample.scala).\r\n\r\nIt breaks down like this:\r\n\r\n* Create a Spec which extends `ClairvoyantSpec`\r\n* Write the spec in the mutable spec style (for various historical reasons)\r\n* Create a context which extends `ClairvoyantContext`\r\n* `InterestingGivens` can be added with statements such as `interestingGivens += (\"Current date\" -> \"21/12/2012\")`\r\n* The Scala code within the spec method is interpreted into a text specification, to encourage readability.\r\n\r\n```scala\r\nclass LoggingExample extends ClairvoyantSpec {\r\n  \"The coordinator\" should {\r\n    \"invoke the Doomsday Device on the 21st of December 2012\" in new context {\r\n      givenTheDateIs(\"21/12/2012\")\r\n      whenTheCoordinatorRuns\r\n      theDoomsdayDevice should beUnleashed\r\n    }\r\n  }\r\n\r\n  trait context extends ClairvoyantContext {\r\n    // test set up and fixtures\r\n  }\r\n}\r\n```\r\n\r\nHere is the output of this spec.\r\n![Example output](http://github.com/rhyskeepence/clairvoyance/raw/master/doc/example-output.jpg)\r\n\r\nGet This Party Started\r\n----------------------\r\n\r\nAdd this to your SBT build:\r\n\r\n    libraryDependencies ++= Seq(\r\n        \"com.github.rhyskeepence\" %% \"clairvoyance\" % \"1.0.<latest travis build number>\"\r\n        //  or, for scala 2.9.2: \r\n        //  \"com.github.rhyskeepence\" %% \"clairvoyance\" % \"27\"\r\n    )\r\n    resolvers ++= Seq(\r\n        \"releases\"  at \"http://oss.sonatype.org/content/repositories/releases\"\r\n    )\r\n\r\nOr in Maven:\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>com.github.rhyskeepence</groupId>\r\n        <artifactId>clairvoyance_2.10.0</artifactId>\r\n        <version>1.0.latest travis build number</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n\r\n    ....\r\n\r\n    <repository>\r\n        <id>sonatype-releases</id>\r\n        <name>sonatype releases</name>\r\n        <snapshots>\r\n            <enabled>false</enabled>\r\n        </snapshots>\r\n        <url>http://oss.sonatype.org/content/repositories/releases</url>\r\n    </repository>\r\n```\r\n\r\nInteresting Givens\r\n------------------\r\n\r\nThese are inputs into your test, which may not be specified in the spec, but should be logged to the output:\r\n\r\n```scala\r\n  interestingGivens += (\"Current date\" -> \"21/12/2012\")\r\n```\r\n\r\nor\r\n\r\n```scala\r\n  (\"Current date\" -> \"21/12/2012\").isInteresting\r\n```\r\n\r\n\r\nCaptured Inputs And Outputs\r\n---------------------------\r\n\r\nThese are the inputs or outputs to your system, which may not be practical to assert upon, but should be logged.\r\n\r\nPerhaps you are using a stub rather than communicating with a third party in your spec:\r\n\r\n```scala\r\nclass StubGizmometer extends Gizmometer {\r\n}\r\n```\r\n\r\nTo capture inputs and outputs, just add the `ProducesCapturedInputsAndOutputs` trait and call `captureValue`:\r\n\r\n```scala\r\nclass StubGizmometer extends Gizmometer with ProducesCapturedInputsAndOutputs {\r\n  def scan(brain: Brain) {\r\n    captureValue(\"Brain\" -> brain)\r\n  }\r\n}\r\n```\r\n\r\nand in your context, register the stub so that clairvoyant knows about it:\r\n\r\n```scala\r\ntrait context extends ClairvoyantContext {\r\n    val gizmometer = new StubGizmometer\r\n    override def capturedInputsAndOutputs = Seq(gizmometer)\r\n}\r\n```\r\n\r\nCustom Rendering of Interesting Givens & Captured Inputs And Outputs\r\n--------------------------------------------------------------------\r\n\r\nWhen you capture a value or an interesting given, it will be rendered to the screen. XML and Strings are formatted\r\nnicely by default, but you may wish to capture your own domain objects and have them presented in readable format.\r\n\r\nA full example is here: [clairvoyance/specs2/examples/CustomRenderingExample.scala](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/CustomRenderingExample.scala)\r\n\r\nThe juicy bits are shown below:\r\n\r\n```scala\r\nclass CustomRenderingExample extends ClairvoyantSpec with CustomRendering {\r\n\r\n  def customRendering = {\r\n    case Brain(iq) => \"a Brain with an IQ of %d\".format(iq)\r\n  }\r\n}\r\n```\r\n\r\n`customRendering` is a partial function, which will be run before the default rendering.\r\n\r\nAnd behold, custom rendering of Brains:\r\n\r\n![Custom Rendering of Brains](http://github.com/rhyskeepence/clairvoyance/raw/master/doc/custom-rendering.jpg)\r\n\r\nSequence Diagrams\r\n-----------------\r\n\r\nIf your spec describes interactions between many systems, it can be nice to generate a sequence diagram automatically\r\nfrom CapturedInputsAndOutputs. Just add the `SequenceDiagram` trait to your context, ie:\r\n\r\n```scala\r\ntrait context extends ClairvoyantContext with SequenceDiagram {\r\n  override def capturedInputsAndOutputs = Seq(system_x, system_y)\r\n}\r\n```\r\n\r\nThe name of the captured values should be in the following formats in order to appear on the diagram:\r\n\r\n`captureValue(\"SOMETHING from X to Y\" -> ...)` or\r\n\r\n`captureValue(\"SOMETHING from X\" -> ...)` or\r\n\r\n`captureValue(\"SOMETHING to Y\" -> ...)`\r\n\r\nIn the last two cases, the default actor will be used, which can be set using this statement in the context:\r\n`override def defaultSequenceDiagramActor = \"Name of my component\"`\r\n\r\nAn example can be found [here](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/SequenceDiagramExample.scala),\r\nwhich produces the following output:\r\n\r\n![Sequence Diagram](http://github.com/rhyskeepence/clairvoyance/raw/master/doc/sequence.jpg)\r\n\r\nAlternatively, a graph can be produced:\r\n\r\n```scala\r\ntrait context extends ClairvoyantContext with Graph\r\n```\r\n\r\nMarkdown\r\n--------\r\n\r\n[Markdown](http://en.wikipedia.org/wiki/Markdown) is supported in specification descriptions, to whet your appetite\r\n[see this example](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/MarkdownExample.scala).\r\n\r\nOTHER COOL STUFF!!!\r\n-------------------\r\n\r\n* [ScalaCheck](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/ScalaCheckExample.scala)\r\n* [Graphs](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/GraphExample.scala)\r\n* [G/W/T](https://github.com/rhyskeepence/clairvoyance/blob/master/src/test/scala/clairvoyance/specs2/examples/GivenWhenThenExample.scala)\r\n\r\nTODO\r\n----\r\n\r\n* Scenario tables\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}